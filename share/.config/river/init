#!/bin/sh
mod="Mod4"

#########
# Basic #
#########
riverctl map normal $mod+Shift E exit
riverctl background-color       0x002b36
riverctl border-color-focused   0x93a1a1
riverctl border-color-unfocused 0x586e75
riverctl set-repeat 50 300

########
# View #
########
riverctl map normal $mod Q close

riverctl map normal $mod J focus-view next
riverctl map normal $mod K focus-view previous

riverctl map normal $mod+Shift J swap next
riverctl map normal $mod+Shift K swap previous

riverctl map normal $mod+Mod1 H move left 100
riverctl map normal $mod+Mod1 J move down 100
riverctl map normal $mod+Mod1 K move up 100
riverctl map normal $mod+Mod1 L move right 100

riverctl map normal $mod+Mod1+Shift H resize horizontal -100
riverctl map normal $mod+Mod1+Shift J resize vertical 100
riverctl map normal $mod+Mod1+Shift K resize vertical -100
riverctl map normal $mod+Mod1+Shift L resize horizontal 100

riverctl map-pointer normal $mod BTN_LEFT  move-view
riverctl map-pointer normal $mod BTN_RIGHT resize-view

##########
# Window #
##########
riverctl map normal $mod Space toggle-float
riverctl map normal $mod F toggle-fullscreen

##########
# Layout #
##########
riverctl default-layout rivertile

riverctl map normal $mod H send-layout-cmd rivertile "main-ratio -0.05"
riverctl map normal $mod L send-layout-cmd rivertile "main-ratio +0.05"

riverctl map normal $mod+Shift H send-layout-cmd rivertile "main-count +1"
riverctl map normal $mod+Shift L send-layout-cmd rivertile "main-count -1"

riverctl map normal $mod Up    send-layout-cmd rivertile "main-location top"
riverctl map normal $mod Right send-layout-cmd rivertile "main-location right"
riverctl map normal $mod Down  send-layout-cmd rivertile "main-location bottom"
riverctl map normal $mod Left  send-layout-cmd rivertile "main-location left"

#######
# Tag #
#######
for i in $(seq 1 9)
do
    tags=$((1 << ($i - 1)))

    riverctl map normal $mod               $i set-focused-tags    $tags
    riverctl map normal $mod+Shift         $i set-view-tags       $tags
    riverctl map normal $mod+Control       $i toggle-focused-tags $tags
    riverctl map normal $mod+Shift+Control $i toggle-view-tags    $tags
done

all_tags=$(((1 << 32) - 1))
riverctl map normal $mod       0 set-focused-tags $all_tags
riverctl map normal $mod+Shift 0 set-view-tags    $all_tags

######################
# Spawn Applications #
######################
riverctl map normal $mod+Shift Return spawn 'bemenu-run'
riverctl map normal $mod       Return spawn 'foot'
riverctl map normal $mod+Shift S      spawn 'grim -g "$(slurp)"'

riverctl map normal $mod       R spawn 'yinput-interactive-record-begin'
riverctl map normal $mod+Shift R spawn 'yinput-interactive-record-end'
riverctl map normal $mod       P spawn 'yinput-interactive-replay'

###########
# Startup #
###########
rivertile -view-padding 6 -outer-padding 6 &

waybar      &
dunst       &
fcitx5      &

pipewire    &
sleep 1
wireplumber &

# In principle we only would be able to write something like:
# "xdg-desktop-portal-wlr &" and have it:
#  - Managed by us
#  - Connect to dbus on its own
# but the freedesktop people bring along the beautiful concept of dbus
# activation and the troubles it ensues.
#
# For whatever reason, they think that we are incapable of launching whatever
# services we need, and these service need to be launched in a on-demand basis.
# This is problematic.
#
# In our case, dbus activation will launch xdg-desktop-portal, which will in
# turn launch xdg-desktop-portal-wlr based on configuration selected using
# XDG_CURRENT_DESKTOP environmental variable. This means that we have to
# somehow set the correct XDG_CURRENT_DESKTOP environmental varialbe based to
# the desktop environment/compositor we are using.
#
# Without dbus activation, this is as simple as running "env
# XDG_CURRENT_DESKTOP=??? xdg-desktop-portal" in your desktop
# environment/compositor init script or better yet run "xdg-desktop-portal-wlr"
# directly because you know which desktop portal implementation you will be
# using anyway. For better user experience, you may use something like xdg
# autostart which by default automatically launched in major desktop
# environment.
#
# With dbus activation however, we are not responsible for launching the xdg
# portal. We have to somehow tell the whoever is responsible for doing that
# what desktop environment/compositor we are using by setting
# XDG_CURRENT_DESKTOP environmental variable, and we have to so via some
# complicated dance with systemd and dbus that is entirely unnecesary.
#
# Pictorially,
#
# Without DBus activation,
#
# --------------            ---------------------------------           --------
# | Compositor |----------->| Desktop Portal Implementation |---------->| DBus |
# --------------  Launches  ---------------------------------  Runs on  --------
#        ^                                  |
#        |                                  |
#        ------------------------------------
#                Communicates with
# (To actually implement desktop portal functionality)
#
#
# With DBus activation,
#
#                       Communicates with (To actually implement desktop portal functionality)
#       ----------------------------------------------------------------------------------------------------------
#       |                                                                                                        |
#       v                                                                                                        |
# --------------                           --------                   ------------------         ---------------------------------
# | Compositor |-------------------------->| DBus |------------------>| Desktop Portal |---------| Desktop Portal Implementation |
# --------------  Set XDG_CURRENT_DESKTOP  --------  DBus Activation  ------------------         ---------------------------------
#       |                                     ^                               ^
#       |                                     |                               |
#       -----------------------------------------------------------------------
#       Configure **/xdg-desktopr-portal/${XDG_CURRENT_DESKTOP}-portals.confg
#       Configure **/xdg-desktopr-portal/portals/${XDG_CURRENT_DESKTOP}.portal
#
# It does not take genius to realize that the bottom picture is a lot more
# complicated, and I would argue for no good reason at all.
#
# Why do have to go through the complicated dance of setting the correct
# environmental variable *in* DBus and write configuration files while the same
# thing could literally be done in like one line of shell script? (Or one
# execve() call in C).
#
# Without DBus activation, the lifetime of desktop portal is very well
# understood. If the compositor exit, because the desktop portal process is a
# child of the compositor, it can do the job of cleaning it up (at least that
# is the case in river - the wayland compositor that I am using).
#
dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=wlr

wait
